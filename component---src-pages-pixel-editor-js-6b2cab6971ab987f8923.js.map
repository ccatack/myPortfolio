{"version":3,"file":"component---src-pages-pixel-editor-js-6b2cab6971ab987f8923.js","mappings":"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","sources":["webpack://gatsby-starter-hello-world/./node_modules/classnames/index.js","webpack://gatsby-starter-hello-world/./src/pages/PixelEditor.js"],"sourcesContent":["/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import classNames from \"classnames\";\r\nimport React, {useEffect, useMemo, useState} from \"react\";\r\n\r\n\r\nconst borderWidth = 4;\r\n\r\nexport default function PixelEditor() {\r\n    const [gridSize, setGridSize] = useState(4)\r\n    const [cellSize, setCellSize] = useState(100)\r\n    const [colorInput, setColorInput] = useState(\"#ff0000\")\r\n    const [mouseDown, setMouseDown] = useState(false)\r\n    const [cellData, setCellData] = useState(Array(gridSize*gridSize).fill({ color: \"#ffffff\" }))\r\n\r\n    const [mousePos, setMousePos] = useState({x: null, y: null})\r\n\r\n    useEffect(() => {\r\n        const updateMousePos = e => {\r\n            console.log(\"updateMouse\", mouseDown)\r\n            if (!mouseDown) {\r\n                return;\r\n            }\r\n            const mousePos = { x: e.clientX, y: e.clientY };\r\n\r\n            let xval= Math.floor((mousePos.x - borderWidth) / cellSize);\r\n            let yval = Math.floor((mousePos.y - borderWidth) / cellSize);\r\n            let index = (yval * gridSize) + xval;\r\n\r\n            console.log({index, colorInput});\r\n\r\n            setCellData((prevCells) => {\r\n                console.log(\"before:\",prevCells);\r\n                prevCells[index].color = colorInput;\r\n                console.log(\"after:\",prevCells);\r\n                \r\n                return prevCells;\r\n            });\r\n\r\n            // pixel value for mouse, need to convert to cell location -> which index in cells\r\n\r\n        }\r\n        window.addEventListener('mousemove', updateMousePos)\r\n\r\n        return () => {window.removeEventListener('mousemove', updateMousePos)}\r\n    }, [mouseDown, colorInput])\r\n\r\n    // const makeCells = () => {\r\n    //     const newCells = []\r\n    //     for (let i = 0; i < gridSize*gridSize; i++) {\r\n    //         newCells[i] = <Cell mouseDown={mouseDown} colorInput={colorInput} key={i} />\r\n    //     }\r\n    //     return newCells\r\n    // }\r\n\r\n    // const cells = useMemo(makeCells, [mouseDown, colorInput, mousePos.x, mousePos.y, cellSize])\r\n    // const cells = cellDatas.map((_, index) =>\r\n    // <Cell mouseDown={mouseDown} colorInput={colorInput} key={index} />);\r\n\r\n    const cells = cellData.map(({color}, index) => \r\n        <div style={{ backgroundColor: color}} key={index}></div>\r\n    )\r\n\r\n    const handleColorInputChange = (e) => {\r\n        const newColor = e.target.value\r\n        setColorInput(newColor)\r\n    }\r\n\r\n    const handleMouseDown = () => {\r\n        setMouseDown(true)\r\n    }\r\n\r\n    const handleMouseUp = () => {\r\n        setMouseDown(false)\r\n    }\r\n    console.log(\"render\", mouseDown)\r\n\r\n\r\n    return (\r\n        <div onMouseDown={handleMouseDown} onMouseUp={handleMouseUp}>\r\n            <div style={{\r\n                display: \"grid\",\r\n                gridTemplateColumns: `repeat(${gridSize}, ${cellSize}px)`,\r\n                gridTemplateRows: `repeat(${gridSize}, ${cellSize}px)`, \r\n                borderWidth: borderWidth, \r\n                borderColor: \"#000000\",\r\n                borderStyle: \"solid\",\r\n                width: \"fit-content\"\r\n            }} >\r\n                {cells}\r\n            </div>\r\n            <input className=\"\" type=\"color\" onChange={handleColorInputChange} value={colorInput} ></input>\r\n            {mouseDown && <div>down</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Cell({colorInput, mouseDown, mousePosX, mousePosY, cellSize}) {\r\n    const [color, setColor] = useState(\"#ffff\")\r\n\r\n    const cellRef = React.useRef()\r\n    let xPos = null\r\n    let yPos = null\r\n\r\n    useEffect(() => {\r\n        xPos = cellRef.current.offsetLeft\r\n        yPos = cellRef.current.offsetTop\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // console.log(mousePosX)\r\n        if (mousePosX >= xPos && mousePosX < xPos+cellSize) {\r\n            if (mousePosY >= yPos && mousePosY < yPos+cellSize) {\r\n                colorChange()\r\n            }\r\n        }\r\n    }, [mousePosX, mousePosY])\r\n\r\n    const handleClick = () => {\r\n        colorChange()\r\n    }\r\n\r\n    const colorChange = () => {\r\n        setColor(colorInput)\r\n    }\r\n\r\n    return (\r\n        <div style={{ backgroundColor: color }} onClick={handleClick} ref={cellRef}></div>\r\n    )\r\n}\r\n\r\n/* \r\nget react dev tool to work\r\napply track mouse location with state\r\n\r\npush to master and make new branch\r\n*/"],"names":["hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","includes","key","call","join","module","exports","default","PixelEditor","gridSize","setGridSize","useState","cellSize","setCellSize","colorInput","setColorInput","mouseDown","setMouseDown","cellData","setCellData","fill","color","mousePos","setMousePos","x","y","useEffect","updateMousePos","e","console","log","clientX","clientY","xval","Math","floor","index","prevCells","window","addEventListener","removeEventListener","cells","map","style","backgroundColor","onMouseDown","onMouseUp","display","gridTemplateColumns","gridTemplateRows","borderWidth","borderColor","borderStyle","width","className","type","onChange","newColor","target","value"],"sourceRoot":""}